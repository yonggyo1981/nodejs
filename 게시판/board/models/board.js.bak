const { sequelize, Sequelize : { QueryTypes } } = require("./index");
const uploadFile = require('./uploadFIle');
const logger = require("../lib/logger");
const path = require('path');
const bcrypt = require('bcrypt');
const { dateFormat } = require("../lib/common");

/**
* 게시판 model 
*
*/
const board = {
	/**
	* 게시판 생성 
	*
	* @param boardId 게시판 아이디
	* @param boardNm 게시판 이름 
	* @return boolean 생성 성공 true
	*/
	async create(boardId, boardNm) {
		try {
			const sql = `INSERT INTO boardConf (boardId, boardNm) 
									VALUES (:boardId, :boardNm)`;
			
			const replacements = {
				boardId,
				boardNm,
			};
			await sequelize.query(sql, {
				replacements,
				type : QueryTypes.INSERT,
			});
			
			return true;
		} catch (err) {
			logger(err.message, 'error');
			logger(err.stack, 'error');
			return false;
		}
	},
	/**
	* 게시판 설정 목록
	*
	*/
	async getBoards() {
		try {
			const sql = "SELECT * FROM boardConf ORDER BY regDt DESC";
			const rows = await sequelize.query(sql, {
				type : QueryTypes.SELECT,
			});
			
			return rows;
		} catch(err) {
			logger(err.message, 'error');
			logger(err.stack, 'error');
			return false;
		}
	},
	/**
	* 게시판 설정 조회 
	*
	* @param boardId 게시판아이디
	*/
	async getBoard(boardId) {
		try {
			const sql = "SELECT * FROM boardConf WHERE boardId = ?";
			const rows = await sequelize.query(sql, {
				replacements : [boardId],
				type : QueryTypes.SELECT,
			});
			
			const data = rows[0];
			if (data) {
				data.category = data.category?data.category.split("||"):[];
				data.categoryOrg = data.category.join("\r\n");
			}
			
			data.skin = data.skin || "default";
			
			const skinPath = path.join(__dirname, "..", "views/board/skins/", data.skin);
			data.listSkinPath = skinPath + "/_list.html";
			data.viewSkinPath = skinPath + "/_view.html";
			data.formSkinPath = skinPath + "/_form.html";
		
			return data;
		} catch (err) {
			logger(err.message, 'error');
			logger(err.stack, 'error');
			return false;
		}
	},
	/**
	* 게시판 설정 저장
	*
	* @param boardId - 게시판 아이디
	* @param data - 설정 데이터 
	*/
	async saveConfig(boardId, data) {
		try {
			const replacements = {
				boardNm : data.boardNm,
				category : data.category?data.category.replace(/\r\n/g, "||"):"",
				listPerPage : data.listPerPage || 15,
				useReply : data.useReply || 0,
				useComment : data.useComment || 0,
				commentLevel : data.commentLevel || 'all',
				listLevel : data.listLevel || 'all',
				viewLevel : data.viewLevel || 'all',
				writeLevel : data.writeLevel || 'all',
				skin : data.skin,
				uploadImage : data.uploadImage || 0,
				uploadFile : data.uploadFile || 0,
				useViewList : data.useViewList || 0,
				useEditor : data.useEditor || 0,
				boardId,
			}
			
			const sql = `UPDATE boardConf 
									SET
										boardNm = :boardNm,
										category = :category,
										listPerPage = :listPerPage,
										useReply = :useReply,
										useComment = :useComment,
										commentLevel = :commentLevel,
										listLevel = :listLevel,
										viewLevel = :viewLevel,
										writeLevel = :writeLevel,
										skin = :skin,
										uploadImage = :uploadImage,
										uploadFile = :uploadFile,
										useViewList = :useViewList,
										useEditor = :useEditor
								WHERE boardId = :boardId`;
			await sequelize.query(sql, {
				replacements,
				type : QueryTypes.UPDATE,
			});
			return true;
		} catch(err) {
			logger(err.message, 'error');
			logger(err.stack, 'error');
			return false;
		}
	},
	/**
	* 게시글 등록 
	*
	*/
	async write(data, req) {

		const sql = `INSERT INTO boardData (boardId, memNo, gid, category, poster, subject, content, password)
							VALUES (:boardId, :memNo, :gid, :category, :poster, :subject, :content, :password)`;
		
		const password = data.password?await bcrypt.hash(data.password, 10):"";
		const replacements = {
				boardId : data.boardId,
				memNo : req.member?req.member.memNo:0,
				gid : data.gid,
				category : data.category,
				poster : data.poster,
				subject : data.subject,
				content : data.content,
				password,
		};
		try {
			const result = await sequelize.query(sql, {
					replacements,
					type : QueryTypes.INSERT,
			});
			
			return result[0]; // 게시글 번호
		} catch (err) {
			logger(err.message, 'error');
			logger(err.stack, 'error');
			return false;
		}
	},
	/**
	* 게시글 조회 
	*
	*/
	async get(idx) {
		try {
			const sql = `SELECT a.*, b.memId, b.memNm FROM boardData a 
										LEFT JOIN member b ON a.memNo = b.memNo 
									WHERE a.idx = ?`;
			const rows = await sequelize.query(sql, {
					replacements : [idx],
					type : QueryTypes.SELECT,
			});
			
			if (rows.length == 0) { // 조회된 게시글이 없는 경우 
				throw new Error("게시글 없음..");
			}
			
			const data = rows[0];
			data.boardConf = await this.getBoard(data.boardId);
			data.postDate = dateFormat(data.regDt, "%Y-%m-%d %H:%i:%s");
			data.editorFiles = data.attachFiles = [];
			const files = await uploadFile.getList(data.gid);
			if (files) {
				data.editorFiles = files.board_editor || [];
				data.attachFiles = files.board || [];
			}
			
			return data;
		} catch (err) {
			logger(err.message, 'error');
			logger(err.stack, 'error');
			return false;
		}
	},
	/**
	* 게시글 목록 
	*
	* @param boardId 게시판 아이디 
	*/
	async getList(boardId, page, limit) {
		
		if (!boardId) 
			return false;
		
		
		/**
		var pagination = require('pagination');
var paginator = pagination.create('search', {prelink:'/', current: 1, rowsPerPage: 200, totalResult: 10020});
console.log(paginator.render());
		*/
		
		try {
			const conf = await this.getBoard(boardId);
			page = page || 1;
			limit = limit || conf.listPerPage; // 설정 - 1페이당 게시글 수
			const offset = (page - 1) * limit;
			
			let commonSql = `SELECT %field FROM boardData a 
											LEFT JOIN member b ON a.memNo = b.memNo 
										WHERE a.boardId = :boardId %addQuery`;
			
			
			let sql = commonSql.replace("%field", "a.*, b.memId, b.memNm")
										.replace("%addQuery", " ORDER BY a.regDt DESC LIMIT :offset, :limit");
			
			
			/* let commonSql = `SELECT * FROM boardData a 
											LEFT JOIN member b ON a.memNo = b.memNo 
										WHERE a.boardId = :boardId ORDER BY a.regDt DESC LIMIT :offset, :limit`;
			*/
			const replacements = {
					boardId,
					offset,
					limit,
			};
			
			const rows = await sequelize.query(sql, {
				replacements,
				type : QueryTypes.SELECT,
			});
			
			const data = {
				boardConf : conf, 
				list : rows,
			}
			console.log(data);
			return data;
		} catch (err) {
			logger(err.message, 'error');
			logger(err.stack, 'error');
			return false;
		}
		
	}
};

module.exports = board;