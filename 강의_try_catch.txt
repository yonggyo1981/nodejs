try _ catch 
	1. 소스 상에서 예상되는 오류가 있을때 
	2. 예상되는 오류가 발생한 경우 후속 처리를 위해서 미리 정의해 놓는 구문
	
	try {
		// 오류가 예상되는 구간
		
		// 오류가 발생하거나 또는 발생시키면 catch로 유입
		throw Error 객체
	} catch (err) {
		// 오류가 발생하면(throw 에러 객체) 유입 
		// 오류에 대한 후속 처리
	}
	    
	예) 
	try {
		const num = 9;
		if (num % 2 == 1) { // 홀수 일때는 오류 발생
			throw "짝수만 가능합니다.";
		}
		

	} catch (err) {
		console.error(err);
	}
	
	Error 생성자 -> 생성해서 throw 
		.message -> new Error("오류메시지") 
		.stack  -> 오류가 발생한 상세 정보
		
		
	예)
	try {
		const num = 9;
		if (num % 2 == 1) { // 홀수 일때는 오류 발생
			throw new Error("짝수만 입력 가능합니다.");
		}
		

	} catch (err) {
		console.error(err.message); // Error 생성자 인수로 넘긴 메세지
		console.error(err.stack); // 에러가 발생한 상세 정보
	}
	
	
	
	finally - 오류가 발생 하든 안하는 무조건 실행되는 영역
	try {
		// 오류가 발생이 예상되는 부분
	} catch (err) {
	  // 오류가 발생(throw)하면 유입되는 부분
	} finally {
		// 오류가 발생하든 안하든 무조건 실행되는 부분
		// 로그 기록할때 자주 쓴다
	}
	
	예)
		try {
			const num = 9;
			if (num % 2 == 1) { // 홀수 일때는 오류 발생
				throw new Error("짝수만 입력 가능합니다.");
			}
			

		} catch (err) {
			console.error(err);
		} finally {
			console.log("무조건 실행");
		}
		
		예)
		function checkEvenNum(num) {
			try {
			   if (num % 2 == 1) {
					throw new Error("짝수가 아닙니다.");
			   }
			} catch (err) {
				console.error(err.message);
				return false;
			}

			return true;
			console.log("반환 완료");
		}
		
		예) 
		function testFunc() {
			const num = 10;
			if (num % 2 == 0) { // 짝수이면 실행을 정지
				return; // return 이후는 실행이 X
			}

			/** 홀수를 처리하는 부분 */
			console.log("홀수를 처리한다....");
			
		}