Express - 웹 프레임워크
		- npm i express  - package.json - dependencies
		- npm i -D nodemon  - package.json - devDependencies
		
		- 라우터
			익스프레스 객체 - 요청 메서드 명과 동일한 라우터 메서드 
						.get("주소", 콜백) - 라우터, .get("문자열")는 다른 기능 
						.post(....)
						.put
						.patch
						.delete
						
						.use -> 모든 요청 방식(get, post, put, patch, delete ....)
							   -> 특정 URL 부분 요청 메서드 상관 없이 처리 하거나 
							   -> 요청 URL, 요청 메서드 상관없이 처리 
		- 미들웨어 
				- 요청과 응답 사이에 존재하는 콜백 함수
				라우터("주소", 미들웨어 콜백함수)
					미들웨어 콜백 함수 매개변수 3가지
							- req - 요청과 관련된 객체
										
							- res - 응답과 관련된 객체
									- send
							
							- next -> 호출 시 다음 미들웨어로 이동 
							
		- 가장 하단에 위치하는 공통 라우터
		   (use, 라우팅 주소 X) 
		    - 없는 페이지 처리 라우터
			   (위에서 아래로 URL 매칭하는데, 매칭이 최종적으로 안된 경우 유입)
			   
		- 가장 상단에 위치하는 공통 라우터 
			- 모든 라우터가 여기를 거쳐 간다 
			- 모든 라우터에서 공통으로 처리할 라우터
			-> 일반적으로 초기화 같은 기능을 처리한다
				예) 로그인 유지 처리...
				
			-> 거쳐 가는 기능이므로 실질적으로 출력되는 부분 각 매칭되는 실제 라우터로 
				유입이 되어야 하므로 
				반드시 next()가 호출되어 다음 미들웨어로 넘어가야 한다.
			-> 기능 확장을 위한 미들웨어 개발
					-> 반드시 미들웨어는 req, res, next라는 매개변수를 꼭 가져야 하고 
					-> 반드시 next()를 호출 해야 한다
					
			-> 매개변수가 4개인 미들웨어 -> 오류 처리 미들웨어
							-> 매개변수 중에서 안쓰는 항목이 있다라고 하더라도 
							-> 반드시 4개는 유지 해야 한다
				err -> 에러객체
				req
				res 
				next 
				
				유입되는 경우
					1. throw 에러객체 
					2. next(에러 객체);
		
		
		
		
	.get("키") -> set으로 지정한 값을 조회
	.set("키", "값") -> 익스프레스 인스턴스에 값 지정(공통 값)
	
	미들웨어 모듈화 
	
	미들웨어 매개변수 
		req - 요청 관련 객체 
			.app -> 익스프레스 객체
						app.js에 설정한 공통 값을 사용하기 위해서 
			.body  -> body-parser 미들웨어가 본문을 해석한 객체(POST, PATCH, PUT .... 양식 데이터)
			.query  -> GET방식으로 전송한 데이터
			.params -> URL 인수 형태로  예) /board/view/:id   -> :id URL 변수 
			.cookies -> cookie-parser 미들웨어가 해석한 객체 
			.ip -> 요청쪽(사용자쪽) IP 
			.url -> 요청 URL 
			.get("헤더 이름") -> 요청 헤더를 검색할때 사용 
			.headers -> 헤더 목록 
			
		res  - 응답 관련 객체 
			.app -> 익스프레스 객체
						app.js에 설정한 공통 값을 사용하기 위해서
			.cookie(키, 값) -> 쿠키를 설정하는 메서드(cookie-parser)
			.cookeCookie(키, 값) -> 쿠키 삭제 메서드
			.json() -> json 출력
						-> 1. 응답 헤더 (Content-Type : application/json
						     2. JSON 형태로 문자열 출력 
							 
			.send("....");  -> 출력
								1. 응답 헤더(Content-Type : text/html)
								2. 출력 
			.sendFile("파일경로"); 
								-> 파일 내용을 읽어서 출력
								 -> http 모듈 -> fs.readFile로 읽어서 출력
								 
			.render("템플릿 파일", 데이터); -> 템플릿 출력 
			.set("키", "값") -> 응답 헤더 설정 
			.redirect("주소") -> URL 이동
			.status(응답코드) -> 응답 코드를 지정 
			
	
	process
			.env -> 환경 변수 (+ 설정에 대한 부분)
				1. dotenv 미들웨어 -> .env 
				2. cross-env 모듈 -> package.json에서 사용자 정의 명령에서 등록 
				
	morgan -> 미들웨어 -> 디버깅(요청 URL, 응답속도 ....)
	
	
	정적 경로 설정 
		-> 기본 라우팅에 영향을 받지 않는 정적 자원에 접근하기 위한 설정 
		express.static("경로") -> 미들웨어
		
		path
			.join
			
	body-parser 
		-> POST(PUT, PATCH ...) 형태의 양식데이터가 
			body부분에 URL이 인코딩 된 형태의 쿼리스트링으로 전송
			-> 문자열 이므로 바로 사용하기 어렵다(가공이 필요하다)
			-> 편하게 사용가능한 객체로 변환해주는 미들웨어
			
			req.body 속성에 객체 형태로 변환 
			
			-> body-parser가 express 기본 모듈로 추가되어 있어서 설정만 하면 된다
			express.json()
			express.urlencoded({extended : false});
			extended : false 
							기본 내장 모듈인 querystring 모듈을 이용해서 처리 
							true
							외부 모듈인 qs 모듈로 처리
					
					