쿠키
서버 -> 브라우저 쿠키 등록 -> 매요청마다 -> 서버에 전달

1) 서버가 응답할때 헤더를 통해서 브라우저에 등록 요청을 합니다.	
   응답헤더 : Set-Cookie : 키=값; 키=값; 
    쿠키 등록 res.cookie("키", "값");
	
2) 브라우저가 서버에서 응답 헤더로 전송한 Set-Cookie 감지 
	-> 브라우저 로컬에 쿠키를 등록 
	-> 쿠키 데이터는 브라우저에 저장 되어 있다
	
3) 서버에 매 요청시 쿠키데이터를 요청 헤더에 담아서 전달 
		-> 쿠키는 보안에 취약
		
4) 서버에서는 요청 쿠키를 접근 할 수 있다.
	쿠키 조회 : req.cookies
	
	
세션
	-> 쿠키가 매 요청시 마다 요청 헤더에 담아서 전송 하므로 데이터 노출이 많다 
	-> 세션은 이런 보안의 취약점 -> 데이터를 서버에 저장 
									       -> 데이터 접근을 바로 하므로, 요청 헤더 X 
										   
	-> 서버에 저장하더라도 개인화된 형태를 유지
		-> 쿠키 형태로 각 브라우저 마다 세션에 접근할 수 있는 키값을 보유 
		


node.js + express 
		-cookie-parser  - 미들웨어
					- 매개변수 1개 -> 쿠키 암호화키 
				- req.headers.cookie의 문자열 데이터를 객체 형태로 변환 
				- req.cookies
				- res.cookie("키", "값")
				- res.clearCookie("키", "값");
				
				
세션 
	express-session 
		npm i express-session
		
		req.session - 객체 
				없는 속성 추가 -> 세션 값 추가 
				예) req.session.memNo = 10;
				
				있는 값에서 대입 -> 변경 
				세션 값 삭제 
				delete req.session.memNo;
				
				세션을 전부 비우기
				req.session.destroy();
				
				참고)
				Servlet 
				HttpSession 
							.invalidate();
							
				PHP 
					session_destory();