
Request(웹브라우저)  <---> Response(서버)
	요청에 대한 정보           ---> 요청 정보를 분석 -> 적절한 정보를 찾아서 출력 
	Header 
	요청하는 서버 자원의 주소
	요청하는 방식(GET, POST, PUT ...)
	웹브라우저 사용 환경
	(IP, HOST, 브라우저 정보(User-Agent)
	브라우저 설정 언어 등등...., 쿠키)
	
	
	
	응답헤더
		응답하는 서버 자원에 대한 정보
		-> content-type ... 
		-> 응답코드
				 - 200대 코드 -> 정상 전송
					(200)
				  -300대 코드
					리다렉트
					캐싱이 되었을때(GET)
					
				  -400대 코드
					- 클라이언트 오류 코드
					- 400 - BAD REQUEST 
					- 401 - NOT AUTHORIZED -> 관리자 페이지
					- 403 - FORBIDDEN -> 폴더 권한 
					- 404 -> NOT FOUND
					
					
				  -500대 코드
				    - 서버 오류 
					
					
	요청 방식(method)
	GET
		- 서버에 자원을 요청할때 
		(URL 형태로 데이터 전송 - 쿼리 스트링 - 키=값&키=값
		Header - 요청에 대한 정보
		
		Body - 출력 부분 X 
		
		효율적인 요청 -> 이미 요청한 동일 데이터(파일명이 동일한 외부 자원) -> 캐싱
		-> 캐싱이 이미 되어 있는 경우(만료시간 있음) 
		-> 응답 코드가 304(캐시됨)
		-> 동일 자원을 이미 확보한 경우 -> 서버 요청 X
		
		
		
		참고)
		DELETE - Body X
		
	POST 
		- 서버에 데이터를 작성,수정하기 위한 전송할떄 
		- 양식 데이터
		Header  - 요청에 대한 정보 
					Content-Type : application/x-www-form-urlencoded
					
		Body  - 데이터 출력 
				- 키=값&키=값.....
				
		- PUT 
		- PATCH
		
http 모듈
	createServer
			.listen
			
		res
			.writeHead(응답코드, 헤더 정보); // 응답 헤더 작성
			.write("문자열"); // 출력 
			.end("문자열"); // 출력하고 응답 종료
			
		req 
			.headers -> 요청 헤더
			.ip 
			.url
			.method ....
			.cookies
			
	-> express 
			.sendFile
			
npm

	사용자 정의 명령어 
	package.json 
		- scripts 
	
	npm run 명령어이름