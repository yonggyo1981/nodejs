function asyncFunc(workNm, time) {
	setTimeout(function() {
		console.log(workNm + " 완료!");
	}, time);
}

비동기 순차 실행 
작업1 - 2초 뒤 실행, 작업2 - 1.5초 뒤 실행, 작업3 - 0.7초 실행

1. 함수 콜백 방식
function asyncFunc(workNm, time, callback) {
	setTimeout(function() {
		console.log(workNm + " 완료!");
        if (typeof callback == 'function') {
            callback();
        }
	}, time);
}

asyncFunc("작업1", 2000, function() {
    asyncFunc("작업2", 1500, function() {
        asyncFunc("작업3", 700);
    });
});


2. Promise 생성자
function asyncFunc(workNm, time) {
    return new Promise(function(resolve, reject) {
        setTimeout(function() {
            if (workNm) 
                resolve(workNm);
            else 
                reject();
        }, time);
    });
}

asyncFunc("작업1", 2000)
    .then(function(workNm) {
        console.log(workNm + " 완료!");

        return asyncFunc("작업2", 1500);
    })
    .then(function(workNm) {
        console.log(workNm + " 완료!");
        return asyncFunc("작업3", 700);
    })
    .then(function(workNm) {
        console.log(workNm + " 완료!");
    })
    .catch(function() {
        console.log("작업 없음!");
    });


3. async ~ await
(async function() {
    try {
        let workNm = await asyncFunc("작업1", 2000);
        console.log(workNm + " 완료!");
        workNm = await asyncFunc("작업2", 1500);
        console.log(workNm + " 완료!");
        workNm = await asyncFunc("작업3", 700);
        console.log(workNm + " 완료!");
    } catch (err) {
        console.log("작업 없음!");
    }
})();